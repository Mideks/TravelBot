from typing import Optional

from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder

import texts
from callback_data import CategoryButton, CityButton, NavigationButton, NavigationLocation, Category, LockableButton
from db.city_data import CityData


def get_categories_markup() -> InlineKeyboardMarkup:
    builder = \
        (InlineKeyboardBuilder()
         .button(text="–ò—Å—Ç–æ—Ä–∏—è",
                 callback_data=CategoryButton(category=Category.History))
         .button(text="üîê –ì–∞–ª–µ—Ä–µ—è",
                 callback_data=CategoryButton(category=Category.Gallery, is_locked=True))

         .button(text="üé≤ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã",
                 callback_data=CategoryButton(category=Category.InterestingFacts))
         .button(text="üé≤ –ú–µ—Å—Ç–∞ –¥–ª—è —Ñ–æ—Ç–æ",
                 callback_data=CategoryButton(category=Category.PhotoPlaces))

         .button(text="üîê –ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å",
                 callback_data=CategoryButton(category=Category.WeatherNow, is_locked=True))
         .button(text="üíé –ö–ª–∏–º–∞—Ç",
                 callback_data=CategoryButton(category=Category.Climate, is_locked=False, is_premium=True))

         .button(text="üé≤ –ó–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç–∏",
                 callback_data=CategoryButton(category=Category.Celebrities, is_locked=False))
         .button(text="üé≤ –ú–µ—Å—Ç–Ω–∞—è –∫—É—Ö–Ω—è",
                 callback_data=CategoryButton(category=Category.LocalCuisine, is_locked=False))

         .button(text="–§–ª–æ—Ä–∞ –∏ —Ñ–∞—É–Ω–∞",
                 callback_data=CategoryButton(category=Category.Nature, is_locked=False))
         .button(text="üé≤ –õ–µ–≥–µ–Ω–¥—ã",
                 callback_data=CategoryButton(category=Category.Legends, is_locked=False))

         .button(text="üé≤ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞",
                 callback_data=CategoryButton(category=Category.InterestingPlaces, is_locked=False))
         .button(text="üé≤ –ú–µ—Å—Ç–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏",
                 callback_data=CategoryButton(category=Category.LocalHolidays, is_locked=False))

         .button(text="üîê –ü–∞–º—è—Ç–Ω–∏–∫–∏",
                 callback_data=CategoryButton(category=Category.Monuments, is_locked=True))
         .button(text="üîê –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                 callback_data=CategoryButton(category=Category.Attractions, is_locked=True))

         .button(text=texts.buttons.back_to_menu,
                 callback_data=NavigationButton(location=NavigationLocation.Menu))

         .adjust(2))

    return builder.as_markup()


def get_content_markup(
        navigation: Optional[bool] = False, link: Optional[str] = None,
        many_content: Optional[bool] = False) -> InlineKeyboardMarkup:
    menu = InlineKeyboardBuilder()
    adjust = []
    if navigation:
        navigate = InlineKeyboardBuilder()
        navigate.button(text="‚óÄÔ∏è", callback_data="todo")
        navigate.button(text="‚ñ∂Ô∏è", callback_data="todo")
        menu.attach(navigate)
        adjust.append(2)

    if link:
        menu.button(text="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", url=link)

    if many_content:
        other_content = InlineKeyboardBuilder()
        other_content.button(text="üé≤ –ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–µ", callback_data=CategoryButton())
        other_content.button(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–∫–æ–º", callback_data="todo")
        menu.attach(other_content)

    menu.button(text=texts.buttons.back_to_city, callback_data=CityButton())

    menu.adjust(*adjust, 1)
    return menu.as_markup()


def get_content_list_markup(contents: list[CityData.Content],
                            navigation: Optional[bool] = False) -> InlineKeyboardMarkup:
    menu = InlineKeyboardBuilder()
    adjust = []
    if navigation:
        navigate = InlineKeyboardBuilder()
        navigate.button(text="‚óÄÔ∏è", callback_data="todo")
        navigate.button(text="‚ñ∂Ô∏è", callback_data="todo")
        menu.attach(navigate)
        adjust.append(2)

    for content in contents:
        menu.button(text=content.title, callback_data="todo")

    menu.button(text=texts.buttons.back_to_city, callback_data=CityButton())

    menu.adjust(*adjust, 1)
    return menu.as_markup()


def get_premium_markup(back: NavigationLocation) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="–ö—É–ø–∏—Ç—å", url="https://t.me/TripTellerBot")
    builder.button(text=texts.buttons.back, callback_data=NavigationButton(location=back))

    builder.adjust(1)
    return builder.as_markup()


def get_greeting_markup() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text=texts.buttons.start_joinery,
                   callback_data=NavigationButton(location=NavigationLocation.Menu))

    return builder.as_markup()


def get_menu_markup() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()

    kb.button(text=texts.buttons.city_list, callback_data=NavigationButton(location=NavigationLocation.CityList))
    kb.button(text=texts.buttons.random_city, callback_data=CityButton(is_random_city=True))
    kb.button(text=texts.buttons.my_gallery, callback_data=LockableButton(is_locked=True))
    kb.button(text=texts.buttons.premium, callback_data=NavigationButton(location=NavigationLocation.PremiumInfo))
    kb.button(text=texts.buttons.settings, callback_data=NavigationButton(location=NavigationLocation.Settings))

    kb.adjust(2, 1)
    return kb.as_markup()


def get_show_premium_markup() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text=texts.buttons.premium_more_info,
                   callback_data=NavigationButton(location=NavigationLocation.PremiumInfo))
    builder.button(text=texts.buttons.back_to_city, callback_data=CityButton())

    return builder.as_markup()


def get_cities_markup(cities: list[CityData]) -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()

    # todo: –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ –ª—É—á—à–∞—è –∏–¥–µ—è, –µ—Å–ª–∏ –≥–æ—Ä–æ–¥–æ–≤ –±—ã–ª–æ –±—ã –º–Ω–æ–≥–æ
    # –°–æ–∑–¥–∞—ë–º –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∞ –∫–∞–∂–¥—ã–π –≥–æ—Ä–æ–¥
    builder.button(text=texts.buttons.random_city, callback_data=CityButton(is_random_city=True))
    for city in cities:
        builder.button(text=city.city_name, callback_data=CityButton(city_name=city.city_name))
    builder.adjust(1, 2)

    return builder.as_markup()
